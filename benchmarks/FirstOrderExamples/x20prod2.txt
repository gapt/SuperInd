set(prolog_style_variables). 
assign(max_given, 2300).
%set(raw).
set(index_flat).
%set(print_gen).
set(superind).
set(cycle2).
set(rank_given).
assign(start_rank, 1).
set(binary_resolution).
set(ordered_res).
set(paramodulation).
%set(back_subsume).
assign(order, kbo).
clear(predicate_elim).
list(kbo_weights).
 s = 5.
end_of_list.
%Je pense qu'on peut facilement trouver des exemples intéressants suivant %ce principe, avec pas mal de variations possibles et pouvant être %compliquées autant qu'on veut. Un exemple très simple:
%p_i(x,y): code le fait que la ressource x est associée au client y à %l'instant i
%q(x,y): le fait que le client demande la ressource x
%r_i(x,y): code le fait que la ressource x a déjà été associée au client y %(avant l'instant i)

%On peut considérer un nbre arbitraire (mais fixé, sf à considérer des %schémas avec deux paramètres...) de clients et de ressources.
formulas(sos).


%On peut ensuite définir une politique d'attribution comme un ensemble de %clauses du premier ordre et utiliser le calcul pour vérifier ses %propriétés. Par exemple, on peut supposer que les clients sont totalement %ordonnés et que toute ressource r est affectée en priorité au client %maximal qui la demande. Puis on vérifie que tout client finit par obtenir %la ressource qu'il souhaite.
a > b.
p(0,a,r1).
p(0,b,r2).
-r(I,X,T) | -q(X,T).

N(I) | -p(I,X,r1) &  -p(I,X,r1).



%-(p(I,X,R) & (T != R)) | -p(I,X,T). 
  
-( (X > Z) &  q(X,R) & q(Z,R) &  -r(I,R,T) ) | p(I,X,R).

-r(I,X,T) | -q(X,T).

-(p(I,X,R) & -q(Z,R) ) | p(s(I),X,R).
 
-(p(I,X,R) & (q(Z,R) & X > Z )) | p(s(I),X,R). 
%N(I) | -p(I,Z,R).

end_of_list.
